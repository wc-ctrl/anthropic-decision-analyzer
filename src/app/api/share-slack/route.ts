import { NextRequest, NextResponse } from 'next/server'
import { DecisionAnalysis, ScenarioAnalysis, Commentary } from '@/types/decision'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const {
      analysisType,
      analysis,
      scenarioData,
      commentary,
      snapshot
    } = body

    // Format the message based on analysis type
    let slackMessage = formatSlackMessage(analysisType, analysis, scenarioData, commentary)

    // Here we would use MCP Slack tools to post to #mission-lab-chatter
    // For now, we'll simulate the posting process
    const slackResponse = await postToSlack(slackMessage, snapshot)

    return NextResponse.json({
      success: true,
      message: 'Analysis shared successfully to #mission-lab-chatter',
      slackResponse
    })

  } catch (error) {
    console.error('Slack sharing error:', error)
    return NextResponse.json(
      { error: 'Failed to share analysis to Slack' },
      { status: 500 }
    )
  }
}

function formatSlackMessage(
  analysisType: string,
  analysis?: DecisionAnalysis,
  scenarioData?: ScenarioAnalysis,
  commentary?: Commentary[]
): string {
  const timestamp = new Date().toLocaleString()
  let message = `🎯 **Claudeswitz Strategic Analysis** - ${timestamp}\n\n`

  // Format based on analysis type
  switch (analysisType) {
    case 'decision':
      message += `📊 **DECISION ANALYSIS**\n`
      message += `*Decision:* ${analysis?.mode.rootInput}\n\n`

      if (analysis?.nodes) {
        const consequences = analysis.nodes.filter(n => n.data.order === 1)
        message += `**Key Consequences (${consequences.length}):**\n`
        consequences.forEach((node, index) => {
          message += `${index + 1}. ${node.data.label}\n`
          if (node.data.description) {
            message += `   └ ${node.data.description}\n`
          }
        })
      }
      break

    case 'forecast':
      message += `🔍 **CAUSAL ANALYSIS**\n`
      message += `*Target Outcome:* ${analysis?.mode.rootInput}\n\n`

      if (analysis?.nodes) {
        const causes = analysis.nodes.filter(n => n.data.order === 1)
        message += `**Primary Causal Factors (${causes.length}):**\n`
        causes.forEach((node, index) => {
          const probability = node.data.probability ? ` (${node.data.probability}%)` : ''
          message += `${index + 1}. ${node.data.label}${probability}\n`
          if (node.data.description) {
            message += `   └ ${node.data.description}\n`
          }
        })
      }
      break

    case 'scenario':
      message += `📈 **SCENARIO ANALYSIS**\n`
      message += `*Target Outcome:* ${scenarioData?.targetOutcome}\n\n`

      if (scenarioData?.tracks) {
        message += `**Probability Tracks:**\n`
        scenarioData.tracks.forEach(track => {
          message += `• **${track.probability}% - ${track.label}**\n`
          message += `  ${track.description}\n`

          // Add key signposts
          if (track.signposts && track.signposts.length > 0) {
            message += `  *Key Signpost:* ${track.signposts[0].text} (${track.signposts[0].timeframe})\n`
          }
          message += `\n`
        })
      }
      break
  }

  // Add commentary
  if (commentary && commentary.length > 0) {
    message += `\n**💬 STRATEGIC COMMENTARY:**\n`
    const latestCommentary = commentary[commentary.length - 1]
    message += `${latestCommentary.content}\n\n`
  }

  message += `_Generated by Claudeswitz Strategic Analysis Platform_`

  return message
}

async function postToSlack(message: string, snapshot?: string): Promise<any> {
  try {
    // This function would use MCP Slack tools to post to #mission-lab-chatter
    // For now, we'll return a simulation of the posting process

    // In a real implementation, this would:
    // 1. Use MCP Slack client to find the #mission-lab-chatter channel
    // 2. Upload the snapshot image if provided
    // 3. Post the formatted message with the image
    // 4. Return the Slack response

    console.log('Posting to Slack #mission-lab-chatter:', message)

    // Simulate MCP Slack API call
    const simulatedResponse = {
      ok: true,
      channel: 'mission-lab-chatter',
      ts: Date.now().toString(),
      message: {
        text: message,
        user: 'claudeswitz-bot',
        type: 'message'
      }
    }

    return simulatedResponse

  } catch (error) {
    console.error('Error posting to Slack:', error)
    throw new Error('Failed to post to Slack channel')
  }
}